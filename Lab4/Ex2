import numpy as np
import matplotlib.pyplot as plt
from pgmpy.models import MarkovNetwork

np.random.seed(0)
original = np.random.choice([0, 1], size=(5, 5))
plt.imshow(original, cmap='gray')
plt.title("Original")
plt.show()

noisy = original.copy()
num_noisy = int(0.1 * noisy.size)
coords = np.random.randint(0, 5, (num_noisy, 2))
for x, y in coords:
    noisy[x, y] = 1 - noisy[x, y]
plt.imshow(noisy, cmap='gray')
plt.title("Noisy")
plt.show()

mrf = MarkovNetwork()
for i in range(5):
    for j in range(5):
        mrf.add_node((i, j))
for i in range(5):
    for j in range(5):
        if i > 0: mrf.add_edge((i, j), (i-1, j))
        if i < 4: mrf.add_edge((i, j), (i+1, j))
        if j > 0: mrf.add_edge((i, j), (i, j-1))
        if j < 4: mrf.add_edge((i, j), (i, j+1))

def denoise(img, steps=2):
    res = img.copy()
    for _ in range(steps):
        new = res.copy()
        for i in range(5):
            for j in range(5):
                n = []
                if i > 0: n.append(res[i-1, j])
                if i < 4: n.append(res[i+1, j])
                if j > 0: n.append(res[i, j-1])
                if j < 4: n.append(res[i, j+1])
                new[i, j] = 1 if sum(n) > len(n)/2 else 0
        res = new
    return res

denoised = denoise(noisy)
plt.imshow(denoised, cmap='gray')
plt.title("Denoised")
plt.show()
